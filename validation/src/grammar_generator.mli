open! Core

module Gen_recursives : sig
  (** It's generally slower to generate and validate sexps for grammars that contain more
      recursive paths. Also, recursive grammars are theoretically interesting, but most
      grammars are relatively simple nested records / variants. *)
  type t =
    | Frequently
    | Occasionally
    | Never
end

(** [quickcheck_generator] generates grammars which:
    - Are well-grounded; i.e. any tycon can be unrolled without entering an infinite loop.
      A textbook non well-grounded grammar contains a path from a [Tycon] back to itself,
      consisting only of [Recursive]s, [Tycon]s, and [Union]s.
    - Are inhabitable
    - Have only inhabitable subgrammars

    The first two properties are clearly desirable, but the third is limitation of our
    tooling, since it's hard to generate values satisfying grammars that have a
    non-inhabitable subgrammar with quickcheck.

    One consequence of this 3rd restriction is that we can never generate:

    {[
      type t =
        | A
        | B of Nothing.t
    ]}

    The generator is weighted to produce grammars that can be generated by
    [@@deriving quickcheck], but the generator is designed to be able to produce all
    grammars that satisfy the three conditions above. *)
val quickcheck_generator
  :  gen_recursives:Gen_recursives.t
  -> Sexp_grammar.grammar Base_quickcheck.Generator.t
